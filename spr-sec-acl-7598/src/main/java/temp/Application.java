



package hello;

import org.h2.tools.Server;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import hello.FileDAO;
import hello.File;

import javax.annotation.PostConstruct;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;


@SpringBootApplication
public class Application extends SpringBootServletInitializer {

  public static void main(String[] args) throws Throwable {
    SpringApplication.run(Application.class, args);
  }

  @Autowired
  private JdbcTemplate jdbcTemplate;

  @PostConstruct
  private void initDb() {
    System.out.println(String.format("****** Creating table: %s, and Inserting test data ******", "Employees"));

    String sqlStatements[] = {
            "drop table employees if exists",
            "create table employees(id serial,first_name varchar(255),last_name varchar(255))",
            "CREATE TABLE FILE(ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL PRIMARY KEY, " +
                    "FILE_NAME VARCHAR_IGNORECASE(50) NOT NULL, CONTENT VARCHAR_IGNORECASE(1024))",

            "insert into employees(first_name, last_name) values('Eugen','Paraschiv')",
            "insert into employees(first_name, last_name) values('Scott','Tiger')"
    };

    Arrays.asList(sqlStatements).stream().forEach(sql -> {
      System.out.println(sql);
      jdbcTemplate.execute(sql);
    });
    File f = new File("filename", "important content");
    FileDAO fd = new FileDAO(jdbcTemplate);
    fd.create(f);
    fd.create(new File("f1", "stuff1"));
    fd.create(new File("f2", "stuff2"));
    fd.create(new File("f3", "stuff3"));

    System.out.println("file from dao: " + fd.byName("filename"));
    System.out.println("file from dao: " + fd.byName("f2"));


  }

  @Bean(initMethod = "start", destroyMethod = "stop")
  public Server inMemoryH2DatabaseServer() throws SQLException {
    return Server.createTcpServer("-tcp", "-tcpAllowOthers", "-tcpPort", "9091");
  }

  @Bean(initMethod = "start", destroyMethod = "stop")
  public Server inMemoryH2webDatabaseServer() throws SQLException {
    return Server.createWebServer("-web","-webAllowOthers","-webPort","8082");
  }


  @Override
  protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
    return application.sources(Application.class);
  }


}
