



package hello;

import org.h2.tools.Server;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
import org.springframework.cache.ehcache.EhCacheManagerFactoryBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import hello.FileDAO;
import hello.File;
import org.springframework.security.acls.domain.*;
import org.springframework.security.acls.jdbc.BasicLookupStrategy;
import org.springframework.security.acls.jdbc.JdbcMutableAclService;
import org.springframework.security.acls.jdbc.LookupStrategy;
import org.springframework.security.acls.model.AclService;
import org.springframework.security.acls.model.MutableAclService;
import org.springframework.security.acls.model.PermissionGrantingStrategy;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.cache.ehcache.EhCacheFactoryBean;

import javax.annotation.PostConstruct;
import javax.sql.DataSource;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;


@SpringBootApplication
public class Application extends SpringBootServletInitializer {

  public static void main(String[] args) throws Throwable {
    SpringApplication.run(Application.class, args);
  }

  @Autowired
  private JdbcTemplate jdbcTemplate;

  private DataSource dataSource;


  @Bean
  public JdbcMutableAclService aclService() {
    return new JdbcMutableAclService(dataSource, lookupStrategy(), aclCache());
  }


  @Autowired
  public void setDataSource(DataSource dataSource) {
    this.dataSource = dataSource;
  }

  @Bean
  public AclAuthorizationStrategy aclAuthorizationStrategy() {
    return new AclAuthorizationStrategyImpl(new SimpleGrantedAuthority("ROLE_ADMIN"));
  }


  @Bean
  public PermissionGrantingStrategy permissionGrantingStrategy() {
    return new DefaultPermissionGrantingStrategy(new ConsoleAuditLogger());
  }

  @Bean
  public LookupStrategy lookupStrategy() {
    return new BasicLookupStrategy(dataSource, aclCache(), aclAuthorizationStrategy(), new ConsoleAuditLogger());
  }


  @Bean
  public EhCacheBasedAclCache aclCache() {
    return new EhCacheBasedAclCache(aclEhCacheFactoryBean().getObject(), permissionGrantingStrategy(), aclAuthorizationStrategy());
  }

  @Bean
  public EhCacheFactoryBean aclEhCacheFactoryBean() {
    EhCacheFactoryBean ehCacheFactoryBean = new EhCacheFactoryBean();
    ehCacheFactoryBean.setCacheManager(aclCacheManager().getObject());
    ehCacheFactoryBean.setCacheName("aclCache");
    return ehCacheFactoryBean;
  }

  @Bean
  public EhCacheManagerFactoryBean aclCacheManager() {
    return new EhCacheManagerFactoryBean();
  }


//  @Autowired
  private AclService aclService;

  @PostConstruct
  private void initDb() {
    System.out.println(String.format("****** Creating table: %s, and Inserting test data ******", "Employees"));

    String sqlStatements[] = {
            "drop table employees if exists",
            "create table employees(id serial,first_name varchar(255),last_name varchar(255))",
            "CREATE TABLE FILE(ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 100) NOT NULL PRIMARY KEY, " +
                    "FILE_NAME VARCHAR_IGNORECASE(50) NOT NULL, CONTENT VARCHAR_IGNORECASE(1024))",

            "insert into employees(first_name, last_name) values('Eugen','Paraschiv')",
            "insert into employees(first_name, last_name) values('Scott','Tiger')"
    };
    String aclsqlStatements[] = {
            "create table acl_sid (\n" +
                    "  id bigint generated by default as identity(start with 100) not null primary key,\n" +
                    "  principal boolean not null,\n" +
                    "  sid varchar_ignorecase(100) not null,\n" +
                    "  constraint unique_uk_1 unique(sid,principal) );",
            "create table acl_class (\n" +
                    "  id bigint generated by default as identity(start with 100) not null primary key,\n" +
                    "  class varchar_ignorecase(100) not null,\n" +
                    "  constraint unique_uk_2 unique(class) );",
            "create table acl_object_identity (\n" +
                    "  id bigint generated by default as identity(start with 100) not null primary key,\n" +
                    "  object_id_class bigint not null,\n" +
                    "  object_id_identity bigint not null,\n" +
                    "  parent_object bigint,\n" +
                    "  owner_sid bigint not null,\n" +
                    "  entries_inheriting boolean not null,\n" +
                    "  constraint unique_uk_3 unique(object_id_class,object_id_identity),\n" +
                    "  constraint foreign_fk_1 foreign key(parent_object)references acl_object_identity(id),\n" +
                    "  constraint foreign_fk_2 foreign key(object_id_class)references acl_class(id),\n" +
                    "  constraint foreign_fk_3 foreign key(owner_sid)references acl_sid(id) );",
            "create table acl_entry (\n" +
                    "  id bigint generated by default as identity(start with 100) not null primary key,\n" +
                    "  acl_object_identity bigint not null,ace_order int not null,sid bigint not null,\n" +
                    "  mask integer not null,granting boolean not null,audit_success boolean not null,\n" +
                    "  audit_failure boolean not null,\n" +
                    "  constraint unique_uk_4 unique(acl_object_identity,ace_order),\n" +
                    "  constraint foreign_fk_4 foreign key(acl_object_identity)\n" +
                    "      references acl_object_identity(id),\n" +
                    "  constraint foreign_fk_5 foreign key(sid) references acl_sid(id) );"
    };

    Arrays.asList(sqlStatements).stream().forEach(sql -> {
      System.out.println(sql);
      jdbcTemplate.execute(sql);
    });

    Arrays.asList(aclsqlStatements).stream().forEach(sql -> {
      System.out.println(sql);
      jdbcTemplate.execute(sql);
    });



    File f = new File("filename", "important content");
    FileDAO fd = new FileDAO(jdbcTemplate, aclService());
    fd.create(f);
    fd.create(new File("f1", "stuff1"));
    fd.create(new File("f2", "stuff2"));
    fd.create(new File("f3", "stuff3"));

    System.out.println("file from dao: " + fd.byName("filename"));
    System.out.println("file from dao: " + fd.byName("f2"));


    fd.createUser("mew");
    System.out.println("users: " + Arrays.toString(fd.getUsers()));



  }

  @Bean(initMethod = "start", destroyMethod = "stop")
  public Server inMemoryH2DatabaseServer() throws SQLException {
    return Server.createTcpServer("-tcp", "-tcpAllowOthers", "-tcpPort", "9091");
  }

  @Bean(initMethod = "start", destroyMethod = "stop")
  public Server inMemoryH2webDatabaseServer() throws SQLException {
    return Server.createWebServer("-web","-webAllowOthers","-webPort","8082");
  }


  @Override
  protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
    return application.sources(Application.class);
  }


}
